clc; clear all; close all;

W = my_generator_weights(1,'backward');

% t_ = [5346768 5347336 5436464 5437032 5496908 5497476 5601780 5602348 5670732 5671300 5910528 5911100 6072564 6073132 6245372 6245940 6363172 6363740 6405388 6405956 6448620 6449188 6546904 6547472 6616480 6617048 6696516 6697084 6752808 6753376 6894204 6894772 7004600 7005168]';
% t_ = [1844688, 1853384, 1867736, 1873600, 1882592, 1888360, 1897520, 1903192, 1912096, 1917808, 1926724, 1932332, 1941060, 1955512, 1961288, 1969932, 1975620, 1984344, 1990088, 2004448, 2013272, 2019100, 2027708, 2033420, 2041840, 2047640, 2056432, 2062212, 2070948, 2076824, 2091604, 2100208, 2106032, 2114884, 2120812, 2129432, 2135236, 2144016, 2158592, 2164464, 2179148, 2188312, 2202916, 2208620, 2217600, 2223324, 2232068, 2237864, 2246456, 2252324, 2260940, 2266560, 2275112, 2281068, 2289772, 2295644, 2310220, 2318904, 2324752, 2333204, 2338924, 2347672, 2353460, 2362304, 2376904, 2382944, 2391592, 2397392, 2406184, 2412068, 2420756, 2435372, 2441116, 2449908, 2455776, 2470440, 2479512, 2485160, 2494128, 2499868, 2508892, 2523324, 2529036, 2537516, 2543296, 2552072, 2566364, 2580964, 2586852, 2595664, 2601464, 2610048, 2615824, 2624344, 2630228, 2644740, 2653460, 2659380, 2668056, 2674032, 2682628, 2688436, 2697292, 2703176, 2711772, 2717596, 2726428, 2732180, 2740896, 2746708, 2755628, 2761400, 2770628, 2776388, 2785348, 2791092, 2799912, 2805596, 2814264, 2820016, 2828692, 2834496, 2843292, 2848892, 2857480, 2863448, 2877936, 2886780, 2901272, 2907100, 2915556, 2930096, 2935892, 2944708, 2959252, 2965240, 2973804, 2979608, 2988504, 2994448, 3003180, 3008992, 3017644, 3023316, 3032060, 3037948, 3047020, 3052888, 3062112, 3076664, 3082304, 3091036, 3096648, 3105500, 3111408, 3120012, 3134472, 3140136, 3148796, 3154588, 3163240, 3169160, 3178088, 3183904, 3192544, 3206764, 3212540, 3221268, 3227024, 3235752, 3241636, 3250380, 3265016, 3270828, 3279732, 3294244, 3300072, 3308912, 3323436, 3329280, 3338184, 3353132, 3358804, 3367748, 3373448, 3382320, 3387960, 3396716, 3402536, 3417000, 3425548, 3431260, 3439940, 3445868, 3454500, 3460388, 3469224, 3475020, 3483692, 3489428, 3497852, 3503644, 3518184, 3526952, 3532852, 3541528, 3556188, 3561976, 3570808, 3576748, 3591340, 3600096, 3605840, 3614628, 3629388, 3635152, 3644344, 3659004, 3664732, 3673644, 3679336, 3688080, 3693832, 3702364, 3708216, 3716988, 3731240, 3737152, 3745884, 3751804, 3760556, 3766280, 3774892, 3789260, 3795084, 3803812, 3809544, 3818316, 3824196, 3832804, 3847416, 3853292, 3868188, 3876828, 3882660, 3891428, 3897164, 3905888, 3911748, 3920696, 3926484, 3935676, 3941384, 3950380, 3956112, 3965020, 3979372, 3985200, 3993816, 3999604, 4008364, 4013992, 4022596, 4028424, 4042940, 4051872, 4057676, 4066184, 4080364, 4086260, 4095132, 4100884, 4109596, 4115528, 4124284, 4130344, 4138952, 4144764, 4153660, 4168232, 4174000, 4182772, 4188532, 4197316, 4203212, 4212200, 4217980, 4227152, 4232824, 4241784, 4247464, 4256312, 4270864, 4285280, 4291164, 4299760, 4305412, 4314124, 4320028, 4328684, 4334548, 4343416, 4349248, 4357972, 4363756, 4372148, 4377836, 4386508, 4392268, 4401096, 4415764, 4421796, 4430428, 4436252, 4450984, 4459616, 4465412, 4474224, 4479996, 4488768, 4494612, 4503500, 4509216, 4518328, 4524040, 4532996, 4547680, 4553352, 4562152, 4567916, 4576456, 4582304, 4590976, 4596692, 4611108, 4619808, 4625720, 4640276, 4648848, 4654604, 4663144, 4669028, 4677832, 4683540, 4692248, 4698132, 4706832, 4712880, 4721464, 4727280, 4736088, 4742008, 4750736, 4756580, 4765352, 4771100, 4779844, 4785672, 4794588, 4800340, 4809520, 4824220, 4838836, 4844472, 4853156, 4867520, 4873340, 4882040, 4887728, 4896292, 4902232, 4910868, 4916744, 4925556, 4940088, 4945888, 4954372, 4960192, 4968972, 4974752, 4983560, 4989380, 4997980, 5003920, 5018332, 5027264, 5041796, 5047556, 5056232, 5061948, 5070704, 5085572, 5091392, 5100508, 5106200, 5115140, 5120760, 5129448, 5143928, 5149780, 5158276, 5164108, 5172820, 5178456, 5186968, 5192812, 5201528, 5216344, 5222092, 5230552, 5236284, 5244780, 5250620, 5259396, 5265116, 5273852, 5288440, 5302996, 5308784, 5317676, 5323584, 5332204, 5346808, 5352576, 5361328, 5367208, 5376148, 5381940, 5391008, 5396644, 5405516, 5411256, 5420224, 5425880, 5434604, 5440424, 5449032, 5454816, 5463328, 5469032, 5477876, 5492332, 5498120, 5506920, 5512776, 5521480, 5527208, 5541284, 5550076, 5555860, 5564648, 5570532, 5579260, 5585316, 5593876, ...
%         5608464, 5614376, 5623080, 5628976, 5637760, 5652192, 5658028, 5666924, 5672716, 5681968, 5687664, 5696604, 5702300, 5711136, 5725524, 5731284, 5739868, 5745756, 5754352, 5760028, 5774512, 5783224, 5789092, 5797856, 5812212, 5818068, 5832316, 5840976, 5846684, 5855432, 5861328, 5870016, 5884636, 5890476, 5899380, 5905268, 5913884, 5919724, 5928460, 5942900, 5948752, 5957692, 5963468, 5972656, 5978344, 5987300, 5993008, 6007512, 6016232, 6022044, 6030692, 6036464, 6045216, 6050908, 6059476, 6065368, 6079864, 6088712, 6094496, 6103068, 6108828, 6117304, 6123180, 6132008, 6137696, 6146376, 6152252, 6160928, 6166980, 6175616, 6181452, 6190324, 6196224, 6210544, 6225076, 6233860, 6239692, 6248612, 6254380, 6263524, 6269212, 6278124, 6283776, 6292644, 6298356, 6307152, 6312884, 6321452, 6327308, 6335952, 6350116, 6356064, 6364740, 6370568, 6379392, 6393780, 6399592, 6408044, 6413760, 6422408, 6436976, 6442888, 6451656, 6457656, 6466280, 6480872, 6486728, 6495392, 6510024, 6515732, 6524440, 6539192, 6544960, 6554144, 6559840, 6568800, 6583376, 6589056, 6597864, 6612188, 6617992, 6626636, 6632308, 6646720, 6655348, 6661208, 6670048, 6675804, 6684392, 6690152, 6698648, 6704472, 6713244, 6727588, 6733500, 6742228, 6748252, 6756848, 6762656, 6771448, 6777364, 6786056, 6791916, 6800712, 6806428, 6815148, 6829796, 6835544, 6844796, 6850532, 6859472, 6865180, 6874020, 6888252, 6893964, 6902676, 6908532, 6917128, 6931288, 6937184, 6951732, 6960584, 6966272, 6974920, 6980740, 6989204, 6994964, 7003688, 7018100, 7023960, 7032628, 7038640, 7047256, 7053044, 7061804, 7067708, 7082220, 7090856, 7105256, 7111172, 7120176, 7126032, 7135196, 7140856, 7149744, 7155384, 7164152, 7178572, 7184376, 7192920, 7198716, 7207360, 7212988, 7227328, 7235996, 7241948, 7250804, 7256564, 7265084, 7270836, 7279340, 7285192, 7293920, 7299600, 7308316, 7314200, 7322884, 7328880, 7337516, 7343352, 7352244, 7358052, 7366656, 7372520, 7387104, 7395828, 7401664, 7416380, 7425460, 7431144, 7440016, 7454668, 7469052, 7474856, 7483384, 7497804, 7512120, 7518028, 7532468, 7541260, 7547132, 7555684, 7561336, 7569656, 7584232, 7590044, 7598864, 7604732, 7613412, 7619452, 7628004, 7633788, 7642652, 7648588, 7657260, 7663092, 7671844, 7686272, 7692096, 7700964, 7706716, 7715836, 7721476, 7736100, 7744880, 7750532, 7759316, 7773632, 7779496, 7788104, 7793724, 7802384, 7808220, 7816860, 7822704, 7831532, 7845880, 7851684, 7860128, 7865868, 7874600, 7880344, 7889124, 7895008, 7903680, 7909688, 7918288, 7933060, 7938992, 7947628, 7953452, 7962228, 7967904, 7976600, 7982444, 7991384, 7997184, 8006440, 8021044, 8026732, 8035592, 8041260, 8049980, 8055776, 8064436, 8070208, 8078876, 8084580, 8093188, 8099032, 8107580, 8113496, 8122364, 8128132, 8136760, 8142504, 8150952, 8156752, 8165540, 8171220, 8179892, 8185764, 8194488, 8209176, 8215004, 8223860, 8229788, 8238372, 8244132, 8252908, 8267492, 8282244, 8287968, 8297056, 8302692, 8311588, 8326284, 8332108, 8341292, 8347416, 8356616, 8362988, 8372612, 8379232, 8389424, 8396952, 8407920, 8415416, 8426000, 8433204, 8451652, 8462280, 8469704, 8480908, 8500232, 8508452, 8520440, 8529308, 8542360, 8552564, 8569928, 8584328, 8606412, 8653700, 8681136]
t_ = getData(1)' / 10^6;
% t_ = t_(1000:1010);
dt = t_(2:end)-t_(1:end-1);

cutOutFactor = 1;   % прореживаем данные

t_ = cutOutData(t_, cutOutFactor);
t = t_;

dL = 0.008913;  % L=0.205 / 23 (щели в круге)
% dL = 0.008913*St;
d = [1:1:length(t)]'*dL * cutOutFactor;

global legendStrings d t;
legendStrings = {};

% figure(1);
% hold on;

% drawTicks(t, d);

a = 1
an = 3;
w_t = 50/1000;
% drawDummyDf(t, d, a, an, w_t);

T = 0.1 % sec
% [t_c, d_c] = getConstPerionGrid(t, d, T, dL*cutOutFactor, 0);


k = 1;

% testRunningAverageFilter(2);

testWindowFilter(3);

% testCombine(4);

% a = 1; an = 0;
% finiteDerivative(t, d, k, 'backward', a, an, 0, 1, 'dF порядка 1 без фильтров');
% 
% a = 0.3; an = 0;
% finiteDerivative(t, d, k, 'backward', a, an, 0, 1, 'dF порядка 1 с фильтром "бегущее среднее" a=0.5');
% 
% 
% a = 0.5; an = 4;
% finiteDerivative(t, d, k, 'backward', a, an, 0, 1, 'dF порядка 1 + усреднение по 4 точкам');
% 
% a = 0.5; an = -1;
% finiteDerivative(t, d, k, 'backward', a, an, 60/1000, 1, 'dF порядка 1 + адаптивное усреднение точкам');


% finiteDerivative(t, d, k, 'backward', 0.4, -1, 20/1000, 1, 'dF порядка N на реальной сетке');

% finiteDerivative(t_c, d_c, k, 'backward', 1, 2, 20/1000, 1, 'dF порядка N на равномерной сетке');

% legend(legendStrings);
% legend('Число реальных тиков', 'dF разность 1го порядка','число тиков с постоянным шагом', 'dF порядка N на реальной сетке', 'dF порядка N на равномерной сетке')

function testRunningAverageFilter(n)
    figure(n); hold on;
    global legendStrings t k d
    legendStrings = {};
    k = 1;
    a = 1; an = 0;
    finiteDerivative(t, d, k, 'backward', a, an, 0, 1, 'dF порядка 1 без фильтров');

%     a = 0.7; an = 0;
%     finiteDerivative(t, d, k, 'backward', a, an, 0, 1, 'dF порядка 1 с фильтром "бегущее среднее" a=0.7');
%     a = 0.5; an = 0;
%     finiteDerivative(t, d, k, 'backward', a, an, 0, 1, 'dF порядка 1 с фильтром "бегущее среднее" a=0.5');
%     a = 0.2; an = 0;
%     finiteDerivative(t, d, k, 'backward', a, an, 0, 1, 'dF порядка 1 с фильтром "бегущее среднее" a=0.2');
    legend(legendStrings);
    xlabel('t')
    ylabel('y');
end

function testWindowFilter(n)
    figure(n); hold on;
    global legendStrings t k d
    legendStrings = {};
    k = 1;
    a = 1; an = 2;
    finiteDerivative(t, d, k, 'backward', a, an, 0, 1, 'оконный фильтр ширины 2');

    a = 1; an = 4;
    finiteDerivative(t, d, k, 'backward', a, an, 0, 1, 'оконный фильтр ширины 4');
    a = 1; an = 8;
    finiteDerivative(t, d, k, 'backward', a, an, 0, 1, 'оконный фильтр ширины 8');
    a = 1; an = 16;
    finiteDerivative(t, d, k, 'backward', a, an, 0, 1, 'оконный фильтр ширины 16');
    
    a = 1; an = -1;
    finiteDerivative(t, d, k, 'backward', a, an, 60/1000, 1, 'оконный фильтр адаптивный W=60ms');
    a = 1; an = -1;
    finiteDerivative(t, d, k, 'backward', a, an, 200/1000, 1, 'оконный фильтр адаптивный W=200ms');
    legend(legendStrings);
end

function testDerType(n)
    figure(n); hold on;
    global legendStrings t k d
    legendStrings = {};
    k = 1;
    a = 1; an = 0;
    finiteDerivative(t, d, 1, 'backward', a, an, 0, 1, 'dF порядка 1');
    
    finiteDerivative(t, d, 2, 'backward', a, an, 0, 1, 'dF порядка 2');
    
    finiteDerivative(t, d, 4, 'backward', a, an, 0, 1, 'dF порядка 4');

    legend(legendStrings);
end

function testCombine(n)
    figure(n); hold on;
    global legendStrings t k d
    legendStrings = {};
    k = 1;
    a = 1; an = 0;
    finiteDerivative(t, d, 1, 'backward', a, an, 0, 1, 'dF порядка 1 без фильтров');
    
    a = 0.5; an = 4;
    finiteDerivative(t, d, 1, 'backward', a, an, 0, 1, 'c "бегущим средним" 0.5, окном 4');
    
    a = 0.5; an = -1;
    finiteDerivative(t, d, 1, 'backward', a, an, 60/1000, 1, 'c "бегущим средним" 0.5, адаптивным окном W=60ms');

    legend(legendStrings);
end


function [t, df] = finiteDerivative(t, d, k, type, a, an, wannaT, needPlot, name)
    df = zeros(size(t));
    an_ = zeros(size(t));
    W = my_generator_weights(k,type);
    for i=max(k+1, an+1):1:length(t)
        dt = t(i)-t(i-1);
        df_c = sum(d(i-k:1:i).*W)/dt;
        df(i) = df_c;
        % инерционный фильтр
        df(i) = a*df_c + (1-a)*df(i-1);
    end
    
    if an ~= 0
        [df, an_] = windowAverageFilter(t, df, an, 2, wannaT);
    end
    
    if needPlot == 1
        global legendStrings;
        hold on;
        plot(t, df);
        legendStrings = {legendStrings{:}, name};
%         if an < 0
%             plot(t, an_)
%             legendStrings = {legendStrings{:}, "Ширина окна"};
%         end
        
    end
end

% y0 -  source signal
% an -  window size. If an < 0 then size is calculated adaptive: when faster
%       changes - lesser the window
% n -   points count for adaptive an
function [y, an_] = windowAverageFilter(t, y0, an, n, wannaT)
    y = y0(:);
    an_ = zeros(size(y0));
    dt = 0;
    for i=1:1:length(y0)
        if an < 0
            c = min(i-1, n) % по n точкам считаем среднее dt
            ddt = t(i-c+1:i) - t(i-c:i-1);
            dt = sum(ddt)/length(ddt);
            an1 = round(wannaT/dt + 1);
            an1 = min(an1, i-1);
        else
            an1 = an;
        end
        if i <= an1
            continue
        end
        an_(i) = an1;
        y(i) = avr(y(i-an1:i));
    end
end

function [t_, d_] = getConstPerionGrid(t, d, T, dL, needPlot)
    t_ = [];
    d_ = [];
    n = round(t(1)/T)+1;
    val = 0;
    for i=2:1:length(t)
        val = val + dL;
        while t(i) > T*n
            t_ = [t_; T*n];
            d_ = [d_; val];
            n = n + 1;
        end
    end
    
    if needPlot == 1
        plot(t_, d_, 'x', 'LineWidth', 2);
        global legendStrings;
        legendStrings = {legendStrings{:}, 'число тиков с постоянным шагом'}
    end
end

% @param a      - вес нового измерения в инерционном фильтре
% @param an     - жестко заданная ширина окна
% @param wannaT - желаемое время реакции (для ширины окна усреднения)
function drawDummyDf(t, d, a, an, wannaT)
    df = zeros(size(t));
    for i=max(2, an+1):1:length(t)
        dt = t(i)-t(i-1);
        df_c = (d(i)-d(i-1))/dt;
        df(i) = df_c;
%         % инерционный фильтр
%         df(i) = a*df_c + (1-a)*df(i-1);
%         % оконный фильтр
%         if an < 0
%             an = round(wannaT/dt + 1);
%             an = min(an, i-1);
%         end
%         df(i) = rms(df(i-an:i));
    end
%     figure(100);
    plot(t, df); grid on; grid minor;
    global legendStrings;
    legendStrings = {legendStrings{:}, 'dF разность 1го порядка'}
end    

function drawTicks(t, d)
    plot(t, d, 'LineWidth', 2);
    hold on;
    % for i=1:1:length(t)
    %     plot([t(i), t(i)], [0, 140], 'g')
    % end
    global legendStrings;
    legendStrings = {legendStrings{:}, 'Число реальных тиков'}
end


function res = cutOutData(src, factor)
    res = src(1:factor:length(src));
end

function W = my_generator_weights(k, name)
    A = zeros(k+1);
    A(1,:)=ones(1,k+1);
    b=zeros(k+1, 1);
    b(2)=1;
    x = [];
    switch name
        case 'forward'
            x=(0:1:k);
        case 'backward'
            x=(-k:1:0);
        case 'central'
            x=(k/2:-1:-k/2);
    end
    fct=1;
    for j=2:1:k+1
        A(j,:) = x.^(j-1)/fct;
        fct = fct*j;
    end
    [W,ok] = my_kramer(A, b);
end

function [x,ok] = my_kramer(A,b)
    [n,m] = size(A);
    d=det(A);
    x = zeros(n,1);
    if (n ~= m || d==0)
        ok=false;
    else
        for i=(1:1:n)
            T = A;
            T(:,i)=b;
            x(i) = det(T)/d;
        end
        ok=true;
    end
end

function [res] = rms(arr)
    res = sqrt(sum(arr.^2)/length(arr));
end

function [res] = avr(arr)
    res = sum(arr)/length(arr);
end
